:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  /*color-scheme: light dark;*/
  color: white;
  background-color: #030615;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/*Create the * selector. This select everything in our page.*/
* {
  padding: 0;
  margin: 0;     
  box-sizing: border-box;
}

/*Selecting the div with the ID of root with the #root*/
#root {
  /*Setting the minimum hight as the 100% of the visible height (vh)*/
  min-height: 100vh;
  /*Enabling a flexible box layout, allowing elements to align, distribute space, and adjust their size efficiently within a container.*/
  display: flex;
  /*position: relative is used to position an element relative to its normal or static position in the document layout. When an element is given position: relative, it remains in the flow of the document, and its original space is still occupied, but you can adjust its position using the top, right, bottom, or left properties.*/
  position: relative;

  /*For test*/
  /* border: 2px solid rgb(0, 60, 255); */
}

/*Selecting the imgContainer class (className)*/
.imgContainer {
  display: flex;
  /*height: 50%;*/
  flex-direction: column;
  max-height: 100%;
  width: 100%;

  /*For test*/
  /* border: 2px solid rgb(255, 0, 0); */
}

/*Select the className of the image to style it.*/
.bgImage {
  width: 100%;
  height: 100%;
  /*flex-grow: 1: This property defines how much the image should grow relative to other flex items in the container when there is available space. A value of 1 means the image can grow to fill up the remaining space equally with other items that also have flex-grow: 1.*/
  flex: 1;
  /*This property is used to control how an image or video is resized to fit its container, particularly when the dimensions of the image and the container differ. It ensures the image covers the entire container while maintaining its aspect ratio.*/
  object-fit: cover;

  /*For test*/
  /* border: 2px solid rgb(189, 255, 7); */
}

/*Styling the footer tag, by just selecting the footer just by using the tag*/
footer {
  /*position: fixed is used to position an element relative to the browser window (viewport), rather than its normal place in the document flow. Once an element is set to position: fixed, it remains fixed at a specific position on the screen, even when the page is scrolled.*/
  position: fixed;
  /*bottom of 0, so that the footer will be hold to the bottom*/
  bottom: 0;
  /*Set the footer to the left*/
  left: 0;
  width: 100%;
  /*re-arranging the info icon, by pushing it on the very right side*/
  display: flex;
  align-items: center;
  justify-content: space-between;
  /*gap property defines the spacing between items in a flex or grid container. When you use gap: 1rem, it creates a gap of 1 rem (relative to the root font size, usually 16px) between the grid rows and columns, or between flex items if applied in a flex container.*/
  gap: 1rem;
  /*Adding a Paddin, so that everything sits toward the center of the page a little bit*/
  padding: 1rem;

  /* For test */
  /* border: 2px solid white; */
}

/*Target and style the div that contains the h1 and h2 elements of the footer.*/
footer div {
  display: flex;
  flex-direction: column;
}

/*Style the footer h2 element*/
footer h2 {
  font-size: 1.4rem;
}

/*Style the footer h1 element*/
footer h1 {
  font-size: 0.9rem;
  /*Setting the font extra thin*/
  font-weight: 200;
}

/*Target and style the footer button (i)*/
footer button {
  background: transparent;
  border: none;
  outline: none;
  color: white;
  padding: 1rem;
  /*The transition-duration property in CSS specifies the time it takes for a transition effect to complete when a CSS property changes. It controls the speed of the transition, allowing for smooth animations between the initial and final states of an element.*/
  transition-duration: 200ms;
  /*Changes the cursor to a hand, when hover over the button.*/
  cursor: pointer;
}

/*Target the button icont and give it a size.*/
footer button i {
  /*If you change from the style above, the one of the footer bottom, changing the size, also change a bit the size of the entire footer itself, like if it is adapting to the size change*/
  font-size: 1.3rem;
}

/*Make the button interactive*/
footer button:hover {
  /*Changing its opacity when you hover over it with the mouse*/
  opacity: 0.7;
}

/*Select and style the bgGradient className of the footer*/
.bgGradient {
  /*position: absolute is used to position an element relative to its nearest positioned ancestor (an element that has a position other than static). If there is no positioned ancestor, the element is positioned relative to the initial containing block (usually the document body).*/
  position: absolute;
  /*inset: 0 is going to expand the full width of the parent container, which is the footer*/
  inset: 0;
  /*z-index: -1 means that is going to be layered behind everything else*/
  z-index: -1;
  /*rgba(255, 255, 255, 0) means completely transparent. Creating a gradient from the bottom to the top of the footer. The bottom will have the same color of the background, the top will be completely transparent, to allow the image under it to be seen*/
  background: linear-gradient(to top, #030615, rgba(255, 255, 255, 0));

  /*For test*/
  /* border: 2px solid rgb(255, 255, 0); */
}

/*Style the Side Bar with the class name of sidebar*/
.sidebar {
  position: fixed;
  /*inset: 0 => means that it extends to the exterior of the entire page. The inset property is a shorthand for setting the top, right, bottom, and left properties of a positioned element. It allows you to define how far an element should be positioned from each edge of its containing block. When you use inset: 0, it sets all four of these properties (top, right, bottom, and left) to 0*/
  inset: 0;
  display: flex;
  /*flex-direction: column; is a property used in a flex container to arrange its child elements in a vertical direction, from top to bottom, instead of the default horizontal row layout.*/
  flex-direction: column;
  /*We want the Side Bar to sit above (cover) the footer by setting a z-index of 10. The z-index property defines the stack level of an element. Elements with a lower z-index will appear behind elements with a higher z-index*/
  z-index: 10;

  /*For test*/
  /* border: 2px solid rgb(0, 255, 51); */
}

/*Select and Style the BackGround overlay of the Side Bar.*/
.bgOverlay {
  /*position: absolute is used to position an element relative to its nearest positioned ancestor (an element that has a position other than static). If there is no positioned ancestor, the element is positioned relative to the initial containing block (usually the document body).*/
  position: absolute;
  inset: 0;
  /*If we see now, without setting the opacity, the entire page is in this color. The image is covered with this Side Bar*/
  background: #030615;
  opacity: 0.6;

  /*For test*/
  /* border: 2px solid rgb(123, 0, 255); */
}

/*Select and style the Side Bar Content*/
.sidebarContents {
  /*z-index of 15, so it seats even higher. The sidebarContents come up on top of our background overlay*/
  z-index: 15; 
  position: relative;
  display: flex;
  /*flex-direction: column; is a property used in a flex container to arrange its child elements in a vertical direction, from top to bottom, instead of the default horizontal row layout.*/
  flex-direction: column;
  /*gap property defines the spacing between items in a flex or grid container. When you use gap: 1rem, it creates a gap of 1 rem (relative to the root font size, usually 16px) between the grid rows and columns, or between flex items*/
  gap: 1rem;
  padding: 1rem;
  /*overflow-y: scroll; is used to control the vertical overflow of an element's content. It forces a vertical scrollbar to appear, even if all the content fits within the element.*/
  overflow-y: scroll;
  height: 100%;
  width: 80%;
  max-width: 800px;
  /*Setting the contents to the right hand side of our page*/
  margin-left: auto; 
  background: #030615;

  /*For test*/
  /* border: 2px solid rgb(255, 243, 105); */
}

/*Tag the sidebarContent and select the div within, which is going to contain all the paragraph text*/
.sidebarContents div {
  /*This will put the arrow button down to the bottom*/
  flex: 1;

  /*For test*/
  /* border: 2px solid rgb(123, 123, 123); */
}

/*Selecting and accessing the button in the Side Bar*/
.sidebarContents button {
  background: transparent;
  color: white;
  border: none;
  /*outline property is used to draw a line around the outside of an element. It's similar to the border property but has some key differences, including that it does not take up space and does not affect the element's layout.*/
  outline: none;
  /*Set the button to the left hand side.*/
  margin-right: auto;
  /*The transition-duration property in CSS specifies the time it takes for a transition effect to complete when a CSS property changes. It controls the speed of the transition, allowing for smooth animations between the initial and final states of an element.*/
  transition-duration: 200ms;
  /*Changes the cursor to a hand, when hover over the button.*/
  cursor: pointer;
  /*1rem: Value applied to the top and bottom of the element. 0: This value applies padding to the left and right of the element. Making it sit to the left border of the Side Bar*/
  padding: 1rem 0;

  /*For test*/
  /*border: 2px solid rgb(255, 130, 130);*/
}

/*Make the button interactive*/
.sidebarContents button:hover {
  /*Changing its opacity when you hover over it with the mouse*/
  opacity: 0.7;
}

/*Target and style the Description container in the SideBar*/
.descriptionContainer {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

/*Target and style the Description title in the SideBar*/
.descriptionTitle {
  font-size: 1.1rem;
  font-weight: 200;
}

/*Target the SideBar Title*/
.sidebarContents h2 {
  font-weight: 200;
  font-size: 1.4rem;
}

/*Select and style the LoadingState gear*/
.loadingState {
  display: flex;
  /*Put the loading gear in the center of the screen*/
  align-items: center;
  justify-content: center;
  flex: 1;
  /*Give some animation to the gear*/
  animation: spin 1.5s linear infinite;
}

/*Target and style the icon within the loadingState.*/
.loadingState i {
  opacity: 0.2;
  font-size: 5rem;
}

/*Define the spin which is used in the loadingState for the gear. It will make the gear to spin full time.*/
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/*We made the sidebar adapted to a phone screen. In order to make it responsive for a big screen display we add the at Media query. Specify the width at which we want the large screen displays to apply with the min-width*/
/*These are the styles that we are going to apply to the tagged items when we exceed the minimum width criteria.*/
/*Try commenting it to see the sidebar for teh mobile adaptation*/
@media (min-width: 640px) {
  /*Tagging the sidebar*/
  .sidebar {
    /*Inside of the sidebar we are going to change its position from being fixed to relative. So that it will sit in the context of the page*/
    position: relative;
    /*Set the inset*/
    inset: unset;
    /*Minimum width of 30% of the view width*/
    min-width: 30%;
    max-height: 100vh;
    box-shadow: 0 0 40px 1px #030615;
  }

  /*Tagging the sidebarContents*/
  .sidebarContents {
    margin: unset;
    width: 100%;
  }
}